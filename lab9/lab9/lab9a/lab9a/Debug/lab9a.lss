
lab9a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001c6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000637  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000589  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000310  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TCNT0_INIT>:
/* The 2 pins of SPDT switch */
uint8_t prev_spdt_pa0 = 0b00000001;
uint8_t prev_spdt_pa1 = 0b00000100;

void TCNT0_INIT(){
	TCNT0 = 0x63;					//Set TCNT0 the value of 99(0x63) = 255 - (1 ms)*(1 MHz)/64(prescale)
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS01)|(1<<CS00);	//Set prescale 64 - these bits of TCCR0 are set - CS02 = 0  CS01 = 1  CS00 = 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);			//TOIE1 is set to 1 in order to enable the timer overflow interrupt
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	89 bf       	out	0x39, r24	; 57
	
	DDRA = 0x04;	//Set as output PORT2 as output 
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;	//Initialize PORTC with 0x00 WHICH mean that none of the digits has enable
  a4:	1b ba       	out	0x1b, r1	; 27
  a6:	08 95       	ret

000000a8 <main>:
	
	return;
}

int main(void){
	cli();
  a8:	f8 94       	cli
    TCNT0_INIT();
  aa:	0e 94 49 00 	call	0x92	; 0x92 <TCNT0_INIT>
    sei();
  ae:	78 94       	sei
	PORTA |= prev_spdt_pa0;
  b0:	9b b3       	in	r25, 0x1b	; 27
  b2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prev_spdt_pa0>
  b6:	89 2b       	or	r24, r25
  b8:	8b bb       	out	0x1b, r24	; 27
	PORTA |= prev_spdt_pa1;
  ba:	9b b3       	in	r25, 0x1b	; 27
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	89 2b       	or	r24, r25
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x1c>

000000c6 <__vector_9>:
	while(1){
    }
}

ISR(TIMER0_OVF_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	if(prev_spdt_pa0 == is_bit_set(PORTA, PA0) && prev_spdt_pa1 != is_bit_set(PORTA, PA1)){
  d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <prev_spdt_pa0>
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	98 13       	cpse	r25, r24
  e0:	26 c0       	rjmp	.+76     	; 0x12e <__vector_9+0x68>
  e2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	82 70       	andi	r24, 0x02	; 2
  ea:	82 17       	cp	r24, r18
  ec:	01 f1       	breq	.+64     	; 0x12e <__vector_9+0x68>
		if(is_bit_set(prev_spdt_pa1, PA1) && is_bit_clear(PORTA, PA1)){		//The previous value was 1 and now we have 0
  ee:	21 ff       	sbrs	r18, 1
  f0:	08 c0       	rjmp	.+16     	; 0x102 <__vector_9+0x3c>
  f2:	d9 99       	sbic	0x1b, 1	; 27
  f4:	0e c0       	rjmp	.+28     	; 0x112 <__vector_9+0x4c>
			clear_bit(out_val, PA2);
  f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 100:	0f c0       	rjmp	.+30     	; 0x120 <__vector_9+0x5a>
		
		}else if(is_bit_clear(prev_spdt_pa1, PA1) && is_bit_set(PORTA, PA1)){	//The previous value was 0 and now we have 1
 102:	d9 9b       	sbis	0x1b, 1	; 27
 104:	0d c0       	rjmp	.+26     	; 0x120 <__vector_9+0x5a>
			set_bit(out_val, PA2);
 106:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 110:	07 c0       	rjmp	.+14     	; 0x120 <__vector_9+0x5a>
			
		}else if(is_bit_set(prev_spdt_pa1, PA1) && is_bit_set(PORTA, PA1)){		//The previous value was 1 and now we have 1
 112:	d9 9b       	sbis	0x1b, 1	; 27
 114:	05 c0       	rjmp	.+10     	; 0x120 <__vector_9+0x5a>
			if(is_bit_set(prev_spdt_pa1, PA1)){
				set_bit(out_val, PA2);
 116:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			}			
		}else{
			//Hopefully we never go there!
		}
		
		count_changes = 0;
 120:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count_changes>
		prev_spdt_pa1 = (PORTA & (1<<PA1));	
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	82 70       	andi	r24, 0x02	; 2
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	40 c0       	rjmp	.+128    	; 0x1ae <__vector_9+0xe8>
	}else if(prev_spdt_pa1 == is_bit_set(PORTA, PA1) && prev_spdt_pa0 != is_bit_set(PORTA, PA0)){
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	82 70       	andi	r24, 0x02	; 2
 132:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	82 13       	cpse	r24, r18
 138:	2c c0       	rjmp	.+88     	; 0x192 <__vector_9+0xcc>
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	98 17       	cp	r25, r24
 140:	41 f1       	breq	.+80     	; 0x192 <__vector_9+0xcc>
		if(is_bit_set(prev_spdt_pa0, PA0) && is_bit_clear(PORTA, PA0)){		//The previous value was 1 and now we have 0
 142:	90 ff       	sbrs	r25, 0
 144:	08 c0       	rjmp	.+16     	; 0x156 <__vector_9+0x90>
 146:	d8 99       	sbic	0x1b, 0	; 27
 148:	0e c0       	rjmp	.+28     	; 0x166 <__vector_9+0xa0>
			clear_bit(out_val, PA2);
 14a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 154:	17 c0       	rjmp	.+46     	; 0x184 <__vector_9+0xbe>
			
		}else if(is_bit_clear(prev_spdt_pa0, PA0) && is_bit_set(PORTA, PA0)){	//The previous value was 0 and now we have 1
 156:	d8 9b       	sbis	0x1b, 0	; 27
 158:	15 c0       	rjmp	.+42     	; 0x184 <__vector_9+0xbe>
			set_bit(out_val, PA2);
 15a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 164:	0f c0       	rjmp	.+30     	; 0x184 <__vector_9+0xbe>
			
		}else if(is_bit_set(prev_spdt_pa0, PA0) && is_bit_set(PORTA, PA0)){		//The previous value was 1 and now we have 1
 166:	d8 9b       	sbis	0x1b, 0	; 27
 168:	0d c0       	rjmp	.+26     	; 0x184 <__vector_9+0xbe>
			if(is_bit_set(prev_spdt_pa0, PA2)){
 16a:	92 ff       	sbrs	r25, 2
 16c:	06 c0       	rjmp	.+12     	; 0x17a <__vector_9+0xb4>
				set_bit(out_val, PA2);
 16e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 172:	84 60       	ori	r24, 0x04	; 4
 174:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 178:	05 c0       	rjmp	.+10     	; 0x184 <__vector_9+0xbe>
			}else{
				clear_bit(out_val, PA2);
 17a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			}
		}else{
			//Hopefully we never go there!
		}
				
		count_changes = 0;
 184:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count_changes>
		prev_spdt_pa0 = (PORTA & (1<<PA0));
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prev_spdt_pa0>
 190:	0e c0       	rjmp	.+28     	; 0x1ae <__vector_9+0xe8>
	}else{
		count_changes++;
 192:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count_changes>
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count_changes>
	}
	
	if (count_changes == 0x0A){ //Change output after 10ms
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	39 f4       	brne	.+14     	; 0x1ae <__vector_9+0xe8>
		if(is_bit_set(out_val, PA2)){
 1a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1a4:	82 ff       	sbrs	r24, 2
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__vector_9+0xe6>
			set_bit(PORTA, PA2);
 1a8:	da 9a       	sbi	0x1b, 2	; 27
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <__vector_9+0xe8>
		}else{
			clear_bit(PORTA, PA2);
 1ac:	da 98       	cbi	0x1b, 2	; 27
		}
	}
	
	TCNT0 = 0x63;
 1ae:	83 e6       	ldi	r24, 0x63	; 99
 1b0:	82 bf       	out	0x32, r24	; 50
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
