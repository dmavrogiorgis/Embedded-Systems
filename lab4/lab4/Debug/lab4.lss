
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800070  00800070  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000318  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072f  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005eb  00000000  00000000  00000a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000595  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000334  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8a:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MEM_INIT>:
.global USART_RXC_vect

.section .text  

MEM_INIT:
		ldi XL, lo8(seg_dec_addr)
  92:	a0 e6       	ldi	r26, 0x60	; 96
		ldi XH, hi8(seg_dec_addr)
  94:	b0 e0       	ldi	r27, 0x00	; 0

		ldi YL, lo8(data_addr)
  96:	c2 e7       	ldi	r28, 0x72	; 114
		ldi YH, hi8(data_addr)
  98:	d0 e0       	ldi	r29, 0x00	; 0
		ret
  9a:	08 95       	ret

0000009c <MEM_CLEAR>:

MEM_CLEAR:
		ldi ZL, lo8(data_addr)
  9c:	e2 e7       	ldi	r30, 0x72	; 114
		ldi ZH, hi8(data_addr)
  9e:	f0 e0       	ldi	r31, 0x00	; 0
		ldi r16, 0x08
  a0:	08 e0       	ldi	r16, 0x08	; 8
		ldi r17, 0x0A
  a2:	1a e0       	ldi	r17, 0x0A	; 10

000000a4 <while_clear>:

		while_clear: 
				st Z+, r17
  a4:	11 93       	st	Z+, r17
				dec r16
  a6:	0a 95       	dec	r16
				brne while_clear
  a8:	e9 f7       	brne	.-6      	; 0xa4 <while_clear>
		ret 
  aa:	08 95       	ret

000000ac <MEM_SHIFT>:

MEM_SHIFT:
		ldi ZL, lo8(data_addr)
  ac:	e2 e7       	ldi	r30, 0x72	; 114
		ldi ZH, hi8(data_addr)
  ae:	f0 e0       	ldi	r31, 0x00	; 0
		ldi r16, 0x06
  b0:	06 e0       	ldi	r16, 0x06	; 6
		add ZL, r16
  b2:	e0 0f       	add	r30, r16

		ldi r16, 0x07
  b4:	07 e0       	ldi	r16, 0x07	; 7

000000b6 <while_shift>:

		while_shift: 
				ld r17, Z+
  b6:	11 91       	ld	r17, Z+
				st Z, r17
  b8:	10 83       	st	Z, r17
				subi ZL, 0x02
  ba:	e2 50       	subi	r30, 0x02	; 2
				dec r16
  bc:	0a 95       	dec	r16
				brne while_shift
  be:	d9 f7       	brne	.-10     	; 0xb6 <while_shift>
		ret
  c0:	08 95       	ret

000000c2 <SEND_OK>:

SEND_OK:
	  ldi ZL, lo8(ok_msg_addr)
  c2:	eb e6       	ldi	r30, 0x6B	; 107
	  ldi ZH, hi8(ok_msg_addr)
  c4:	f0 e0       	ldi	r31, 0x00	; 0
	  ldi r17, 0x04
  c6:	14 e0       	ldi	r17, 0x04	; 4

000000c8 <USART_T>:

	  USART_T:
		  sbis UCSRA, UDRE	//UDRE is 1 when the UDR is empty.  
  c8:	5d 9b       	sbis	0x0b, 5	; 11
		  rjmp USART_T		//So we wait untill we send all the 4 bytes
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <USART_T>

	  ld r18, Z+
  cc:	21 91       	ld	r18, Z+
	  //out UDR, r18
	  out TCNT2, r18
  ce:	24 bd       	out	0x24, r18	; 36
	  dec r17
  d0:	1a 95       	dec	r17
	  brne USART_T
  d2:	d1 f7       	brne	.-12     	; 0xc8 <USART_T>

	  ldi r21, 0x00
  d4:	50 e0       	ldi	r21, 0x00	; 0
	  sts read_char, r21
  d6:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
	  ret
  da:	08 95       	ret

000000dc <GETC>:

GETC: 
	in r17, UCSRA
  dc:	1b b1       	in	r17, 0x0b	; 11
	sbrs r17, RXC
  de:	17 ff       	sbrs	r17, 7
	rjmp GETC
  e0:	fd cf       	rjmp	.-6      	; 0xdc <GETC>

	in r18, UDR
  e2:	2c b1       	in	r18, 0x0c	; 12
	in r18, UDR ; added
  e4:	2c b1       	in	r18, 0x0c	; 12
	mov r18, r15 ; added
  e6:	2f 2d       	mov	r18, r15
	ret
  e8:	08 95       	ret

000000ea <PUTC>:

 PUTC: 
	in r17, UCSRA
  ea:	1b b1       	in	r17, 0x0b	; 11
	sbrs r17, UDRE
  ec:	15 ff       	sbrs	r17, 5
	rjmp PUTC
  ee:	fd cf       	rjmp	.-6      	; 0xea <PUTC>

	; out UDR, r16
	out TCNT2, r16 ; replaced
  f0:	04 bd       	out	0x24, r16	; 36
	ret
  f2:	08 95       	ret

000000f4 <__vector_9>:

TIMER0_OVF_vect: 
		lds r20, digit_cnt
  f4:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <digit_cnt>

		cpi r20, 0x08			//Check if we have dispaly all the digits
  f8:	48 30       	cpi	r20, 0x08	; 8
		brne done
  fa:	19 f4       	brne	.+6      	; 0x102 <done>
		ldi r20, 0x00			//Reset digit_cnt (r20) with 0 to start counting the digits again
  fc:	40 e0       	ldi	r20, 0x00	; 0
		ldi YL, lo8(data_addr)		//Reset YL register to the first digit data address
  fe:	c2 e7       	ldi	r28, 0x72	; 114
		ldi YH, hi8(data_addr)		//Reset YL register to the first digit data address
 100:	d0 e0       	ldi	r29, 0x00	; 0

00000102 <done>:
   done:
		ldi r17, 0xFF
 102:	1f ef       	ldi	r17, 0xFF	; 255
		out PORTA, r17		
 104:	1b bb       	out	0x1b, r17	; 27

		ld r19, Y+		//Read the bcd number 
 106:	39 91       	ld	r19, Y+

		add XL, r19		//Calculate the address in which the decoded number exists
 108:	a3 0f       	add	r26, r19
		ld r18, X
 10a:	2c 91       	ld	r18, X
		sub XL, r19		//
 10c:	a3 1b       	sub	r26, r19

		cpi r20, 0x00		//Check if we have to dispaly the 1st digit
 10e:	40 30       	cpi	r20, 0x00	; 0
		brne else
 110:	39 f4       	brne	.+14     	; 0x120 <else>
		in r16, PORTC
 112:	05 b3       	in	r16, 0x15	; 21
		sec					//Set carry for ROL instr
 114:	08 94       	sec
		rol r16	
 116:	00 1f       	adc	r16, r16
		clc					//Clear carry
 118:	88 94       	clc
		out PORTC, r16						
 11a:	05 bb       	out	0x15, r16	; 21
		jmp done1
 11c:	0c 94 93 00 	jmp	0x126	; 0x126 <done1>

00000120 <else>:
   else:					//We already have one "1" and we need to just shift left
		in r16, PORTC		
 120:	05 b3       	in	r16, 0x15	; 21
		rol r16
 122:	00 1f       	adc	r16, r16
		out PORTC, r16		
 124:	05 bb       	out	0x15, r16	; 21

00000126 <done1>:
   done1:
   		out PORTA, r18
 126:	2b bb       	out	0x1b, r18	; 27

		ldi r16, 0x63		//Set once again the value of TCNT0 in order to roll again after the handling
 128:	03 e6       	ldi	r16, 0x63	; 99
		out TCNT0, r16
 12a:	02 bf       	out	0x32, r16	; 50

		inc r20
 12c:	43 95       	inc	r20
		sts digit_cnt, r20
 12e:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <digit_cnt>
		reti
 132:	18 95       	reti

00000134 <__vector_11>:

USART_RXC_vect:
		rcall GETC
 134:	d3 df       	rcall	.-90     	; 0xdc <GETC>

		lds r21, read_char
 136:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <__data_end>

		cpi r21, 0x00		// If read_char register has 0x00 and the value we receive is A, we store A
 13a:	50 30       	cpi	r21, 0x00	; 0
		brne done_1				
 13c:	31 f4       	brne	.+12     	; 0x14a <done_1>
		cpi r18, A_HEX
 13e:	21 34       	cpi	r18, 0x41	; 65
		brne done_1
 140:	21 f4       	brne	.+8      	; 0x14a <done_1>
		mov r21, r18	
 142:	52 2f       	mov	r21, r18
		sts read_char, r21
 144:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
		reti
 148:	18 95       	reti

0000014a <done_1>:
  done_1:
		cpi r21, 0x00		// If read_char register has 0x00 and the value we receive is C or N, we store them and clear memory
 14a:	50 30       	cpi	r21, 0x00	; 0
		brne done_2				
 14c:	49 f4       	brne	.+18     	; 0x160 <done_2>
		cpi r18, C_HEX
 14e:	23 34       	cpi	r18, 0x43	; 67
		breq if_1				
 150:	11 f0       	breq	.+4      	; 0x156 <if_1>
		cpi r18, N_HEX
 152:	2e 34       	cpi	r18, 0x4E	; 78
		brne done_2
 154:	29 f4       	brne	.+10     	; 0x160 <done_2>

00000156 <if_1>:
   if_1:
		mov r21, r18		
 156:	52 2f       	mov	r21, r18
		rcall MEM_CLEAR	
 158:	a1 df       	rcall	.-190    	; 0x9c <MEM_CLEAR>
		sts read_char, r21		
 15a:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
		reti
 15e:	18 95       	reti

00000160 <done_2>:
  done_2:
		cpi r21, A_HEX	// If read_char register has A and the value we receive is T, we replace A with T
 160:	51 34       	cpi	r21, 0x41	; 65
		brne done_3
 162:	31 f4       	brne	.+12     	; 0x170 <done_3>
		cpi r18, T_HEX
 164:	24 35       	cpi	r18, 0x54	; 84
		brne done_3
 166:	21 f4       	brne	.+8      	; 0x170 <done_3>
		mov r21, r18
 168:	52 2f       	mov	r21, r18
		sts read_char, r21	
 16a:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
		reti
 16e:	18 95       	reti

00000170 <done_3>:
  done_3:
		cpi r18, CR_HEX			//If read_char register has CR and the value we receive is T or C or X (X means number), 
 170:	2d 30       	cpi	r18, 0x0D	; 13
		brne done_4				//we replace them with CR
 172:	51 f4       	brne	.+20     	; 0x188 <done_4>
		cpi r21, T_HEX	
 174:	54 35       	cpi	r21, 0x54	; 84
		breq if_2
 176:	21 f0       	breq	.+8      	; 0x180 <if_2>
		cpi r21, C_HEX	
 178:	53 34       	cpi	r21, 0x43	; 67
		breq if_2
 17a:	11 f0       	breq	.+4      	; 0x180 <if_2>
		cpi r21, X_HEX	
 17c:	58 35       	cpi	r21, 0x58	; 88
		brne done_5	
 17e:	a1 f4       	brne	.+40     	; 0x1a8 <done_5>

00000180 <if_2>:
   if_2:
		mov r21, r18
 180:	52 2f       	mov	r21, r18
		sts read_char, r21
 182:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
		reti
 186:	18 95       	reti

00000188 <done_4>:
  done_4:
		cpi r18, 0x30		//If we receive a number 0-9 and the the read_char is N or an other number, we replace them with X
 188:	20 33       	cpi	r18, 0x30	; 48
		brlt done_5			//and then we shift data in memory, store the new number and return
 18a:	74 f0       	brlt	.+28     	; 0x1a8 <done_5>
		cpi r18, 0x3A		
 18c:	2a 33       	cpi	r18, 0x3A	; 58
		brge done_5
 18e:	64 f4       	brge	.+24     	; 0x1a8 <done_5>
		cpi r21, N_HEX
 190:	5e 34       	cpi	r21, 0x4E	; 78
		breq if_3			
 192:	11 f0       	breq	.+4      	; 0x198 <if_3>
		cpi r21, X_HEX
 194:	58 35       	cpi	r21, 0x58	; 88
		brne done_5				
 196:	41 f4       	brne	.+16     	; 0x1a8 <done_5>

00000198 <if_3>:
    if_3:
		rcall MEM_SHIFT
 198:	89 df       	rcall	.-238    	; 0xac <MEM_SHIFT>
		subi r18, 0x30			// The mask we need to apply in order to isolate the bcd form of the number
 19a:	20 53       	subi	r18, 0x30	; 48
		sts data_addr, r18		
 19c:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <data_addr>
		ldi r21, X_HEX
 1a0:	58 e5       	ldi	r21, 0x58	; 88
		sts read_char, r21	
 1a2:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
		reti
 1a6:	18 95       	reti

000001a8 <done_5>:
  done_5:
		cpi r21, CR_HEX	//If  read_char register has CR and the value we receive is LF, we send OK<CR><LF>
 1a8:	5d 30       	cpi	r21, 0x0D	; 13
		brne done_6
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <done_6>
		cpi r18, LF_HEX
 1ac:	2a 30       	cpi	r18, 0x0A	; 10
		brne done_6
 1ae:	11 f4       	brne	.+4      	; 0x1b4 <done_6>
		rcall SEND_OK
 1b0:	88 df       	rcall	.-240    	; 0xc2 <SEND_OK>
		reti
 1b2:	18 95       	reti

000001b4 <done_6>:
  done_6:
		ldi r21, 0x00		//We clear read_char register if we receive an unknown char without the correct order
 1b4:	50 e0       	ldi	r21, 0x00	; 0
		sts read_char, r21
 1b6:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__data_end>
 1ba:	18 95       	reti

000001bc <TCNT0_INIT>:
    }
}

void TCNT0_INIT(){

	TCNT0 = 0x63;						// Set TCNT0 the value of 99(0x63) = 255 - (1 ms)*(1 MHz)/64(prescale)
 1bc:	83 e6       	ldi	r24, 0x63	; 99
 1be:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS01)|(1<<CS00);		//Set prescale 64 - these bits of TCCR0 are set - CS02 = 0  CS01 = 1  CS00 = 1
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);					// TOIE0 is set to 1 in order to enable the timer overflow interrupt
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 bf       	out	0x39, r24	; 57
	
	DDRA = 0xFF;		//Set as output PORTA AND PORT C
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 1cc:	84 bb       	out	0x14, r24	; 20
	
	PORTA = 0xFF;		//Initialize PORTA with 0xFF which means that 7-seg dispaly is turned off
 1ce:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0x00;		//Initialize PORTC with 0x00 WHICH mean that none of the digits has enable
 1d0:	15 ba       	out	0x15, r1	; 21
 1d2:	08 95       	ret

000001d4 <USART_INIT>:
	return;
}

void USART_INIT(unsigned int ubrr){
	
	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);		//Enable RXC interrupts, Receive and Transmit
 1d4:	28 e9       	ldi	r18, 0x98	; 152
 1d6:	2a b9       	out	0x0a, r18	; 10
	UBRRH = (unsigned char)(ubrr>>8);		// Set baud rate
 1d8:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;		
 1da:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = (1<<URSEL);					// We make it "1" in order to write to UCSRC
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	80 bd       	out	0x20, r24	; 32
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1);		//8-bit size for everything we transmit and receive
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	80 bd       	out	0x20, r24	; 32
 1e4:	08 95       	ret

000001e6 <main>:

extern void MEM_CLEAR();
extern void MEM_INIT();

int main(void){
	cli();						//Turn off interrupts before initialization
 1e6:	f8 94       	cli
	TCNT0_INIT();				//Init the timer0
 1e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <TCNT0_INIT>
	USART_INIT(UBRR_BAUD);		//Init the usart
 1ec:	80 e4       	ldi	r24, 0x40	; 64
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_INIT>
	sei();						//Enable interrupts after initilization
 1f4:	78 94       	sei
	MEM_INIT();		//Set X point to seg_dec_addr array and Y register point to data_addr array
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <MEM_INIT>
	MEM_CLEAR();	//Initialize memory with 0x0A in order to turn off the 7-segment display
 1fa:	0e 94 4e 00 	call	0x9c	; 0x9c <MEM_CLEAR>
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <main+0x18>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
