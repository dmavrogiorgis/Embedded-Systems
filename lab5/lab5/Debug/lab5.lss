
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800070  00800070  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081b  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000647  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000422  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8a:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TCNT0_INIT>:
uint8_t OK_MSG[4] = {0x4F, 0x4B, 0xD, 0xA};																	//Here we store ok in memory	
uint8_t DECODED_BCD_NUMBERS[11] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xFF};		//Decoded bcd to 7-seg
	
void TCNT0_INIT(){

	TCNT0 = 0x63;						// Set TCNT0 the value of 99(0x63) = 255 - (1 ms)*(1 MHz)/64(prescale)
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS01)|(1<<CS00);		//Set prescale 64 - these bits of TCCR0 are set - CS02 = 0  CS01 = 1  CS00 = 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);					// TOIE0 is set to 1 in order to enable the timer overflow interrupt
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57
	
	DDRA = 0xFF;		//Set as output PORTA AND PORT C
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  a2:	84 bb       	out	0x14, r24	; 20
	
	PORTA = 0xFF;		//Initialize PORTA with 0xFF which means that 7-seg dispaly is turned off
  a4:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0x00;		//Initialize PORTC with 0x00 WHICH mean that none of the digits has enable
  a6:	15 ba       	out	0x15, r1	; 21
  a8:	08 95       	ret

000000aa <USART_INIT>:
	return;
}

void USART_INIT(unsigned int ubrr){
	
	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);		//Enable RXC interrupts, Receive and Transmit
  aa:	28 e9       	ldi	r18, 0x98	; 152
  ac:	2a b9       	out	0x0a, r18	; 10
	UBRRH = (unsigned char)(ubrr>>8);		// Set baud rate
  ae:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  b0:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = (1<<URSEL);					// We make it "1" in order to write to UCSRC
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 bd       	out	0x20, r24	; 32
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1);		//8-bit size for everything we transmit and receive
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <MEM_CLEAR>:
	
	return;
}

void MEM_CLEAR(){
  bc:	e3 e7       	ldi	r30, 0x73	; 115
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	2b e7       	ldi	r18, 0x7B	; 123
  c2:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0; i<8; i++){
		RECEIVED_NUMBERS[i] = 0x0A;
  c4:	8a e0       	ldi	r24, 0x0A	; 10
  c6:	81 93       	st	Z+, r24
	
	return;
}

void MEM_CLEAR(){
	for(uint8_t i=0; i<8; i++){
  c8:	e2 17       	cp	r30, r18
  ca:	f3 07       	cpc	r31, r19
  cc:	e1 f7       	brne	.-8      	; 0xc6 <MEM_CLEAR+0xa>
		RECEIVED_NUMBERS[i] = 0x0A;
	}
	return;
}
  ce:	08 95       	ret

000000d0 <MEM_SHIFT>:

void MEM_SHIFT(){
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	23 e7       	ldi	r18, 0x73	; 115
  d6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t temp;
	for(uint8_t i=7; i>0; i--){
		temp = RECEIVED_NUMBERS[i-1];
		RECEIVED_NUMBERS[i] = temp;
  d8:	82 91       	ld	r24, -Z
  da:	81 83       	std	Z+1, r24	; 0x01
	return;
}

void MEM_SHIFT(){
	uint8_t temp;
	for(uint8_t i=7; i>0; i--){
  dc:	e2 17       	cp	r30, r18
  de:	f3 07       	cpc	r31, r19
  e0:	d9 f7       	brne	.-10     	; 0xd8 <MEM_SHIFT+0x8>
		temp = RECEIVED_NUMBERS[i-1];
		RECEIVED_NUMBERS[i] = temp;
	}
	return;
}
  e2:	08 95       	ret

000000e4 <USART_TRANSMIT>:

void USART_TRANSMIT(){
  e4:	eb e6       	ldi	r30, 0x6B	; 107
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	2f e6       	ldi	r18, 0x6F	; 111
  ea:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i=0; i<4; i++){
		while (!( UCSRA & (1<<UDRE)));
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <USART_TRANSMIT+0x8>
		
		//UDR = ok_msg_addr[i];
		TCNT2 = OK_MSG[i];
  f0:	81 91       	ld	r24, Z+
  f2:	84 bd       	out	0x24, r24	; 36
	return;
}

void USART_TRANSMIT(){
	
	for(uint8_t i=0; i<4; i++){
  f4:	e2 17       	cp	r30, r18
  f6:	f3 07       	cpc	r31, r19
  f8:	c9 f7       	brne	.-14     	; 0xec <USART_TRANSMIT+0x8>
		while (!( UCSRA & (1<<UDRE)));
		
		//UDR = ok_msg_addr[i];
		TCNT2 = OK_MSG[i];
	}
	prev_char = 0x00;
  fa:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <prev_char>
  fe:	08 95       	ret

00000100 <USART_RECEIVE>:
}

uint8_t USART_RECEIVE(){
	uint8_t received_data;
	
	while (!(UCSRA & (1<<RXC)));
 100:	5f 9b       	sbis	0x0b, 7	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <USART_RECEIVE>
	received_data = UDR;
 104:	8c b1       	in	r24, 0x0c	; 12
	received_data = UDR;
 106:	8c b1       	in	r24, 0x0c	; 12
	received_data = input_char;
	
	return received_data;
}
 108:	8f 2d       	mov	r24, r15
 10a:	08 95       	ret

0000010c <main>:

int main(void){
	cli();						//Turn off interrupts before initialization
 10c:	f8 94       	cli
	TCNT0_INIT();				//Init the timer0
 10e:	0e 94 49 00 	call	0x92	; 0x92 <TCNT0_INIT>
	USART_INIT(UBRR_BAUD);		//Init the usart
 112:	80 e4       	ldi	r24, 0x40	; 64
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 55 00 	call	0xaa	; 0xaa <USART_INIT>
	sei();						//Enable interrupts after initilization
 11a:	78 94       	sei

	MEM_CLEAR();	//Initialize memory with 0x0A in order to turn off the 7-segment display
 11c:	0e 94 5e 00 	call	0xbc	; 0xbc <MEM_CLEAR>
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x14>

00000122 <__vector_9>:
	
    while (1){
    }
}

ISR(TIMER0_OVF_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	uint8_t display_num;
	
	if(digit_cnt == 0x08){
 134:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <digit_cnt>
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	11 f4       	brne	.+4      	; 0x140 <__vector_9+0x1e>
		digit_cnt = 0x00;
 13c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <digit_cnt>
	}
	display_num = RECEIVED_NUMBERS[digit_cnt];
 140:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <digit_cnt>
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ed 58       	subi	r30, 0x8D	; 141
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	e0 81       	ld	r30, Z
	
	PORTA = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	8b bb       	out	0x1b, r24	; 27
	PORTC = (1<<digit_cnt);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 72 00 	lds	r0, 0x0072	; 0x800072 <digit_cnt>
 158:	02 c0       	rjmp	.+4      	; 0x15e <__vector_9+0x3c>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <__vector_9+0x38>
 162:	85 bb       	out	0x15, r24	; 21
	
	PORTA = DECODED_BCD_NUMBERS[display_num];
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 5a       	subi	r30, 0xA0	; 160
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	8b bb       	out	0x1b, r24	; 27
	TCNT0 = 0x63;
 16e:	83 e6       	ldi	r24, 0x63	; 99
 170:	82 bf       	out	0x32, r24	; 50
	digit_cnt++;
 172:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <digit_cnt>
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <digit_cnt>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_11>:

ISR(USART_RXC_vect){
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	uint8_t current_char = USART_RECEIVE();
 1b4:	0e 94 80 00 	call	0x100	; 0x100 <USART_RECEIVE>
 1b8:	c8 2f       	mov	r28, r24
	
	if(prev_char == 0x00 && current_char == A_HEX){
 1ba:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <prev_char>
 1be:	81 11       	cpse	r24, r1
 1c0:	11 c0       	rjmp	.+34     	; 0x1e4 <__vector_11+0x56>
 1c2:	c1 34       	cpi	r28, 0x41	; 65
 1c4:	21 f4       	brne	.+8      	; 0x1ce <__vector_11+0x40>
		prev_char = A_HEX;
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <prev_char>
 1cc:	3f c0       	rjmp	.+126    	; 0x24c <__vector_11+0xbe>
	}else if(prev_char == 0x00 && (current_char == C_HEX || current_char == N_HEX)){
 1ce:	c3 34       	cpi	r28, 0x43	; 67
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <__vector_11+0x48>
 1d2:	ce 34       	cpi	r28, 0x4E	; 78
 1d4:	79 f4       	brne	.+30     	; 0x1f4 <__vector_11+0x66>
		MEM_CLEAR();
 1d6:	0e 94 5e 00 	call	0xbc	; 0xbc <MEM_CLEAR>
		num_of_digits = 0x00;
 1da:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
		prev_char = current_char;
 1de:	c0 93 71 00 	sts	0x0071, r28	; 0x800071 <prev_char>
 1e2:	34 c0       	rjmp	.+104    	; 0x24c <__vector_11+0xbe>
	}else if(prev_char == A_HEX && current_char == T_HEX){
 1e4:	81 34       	cpi	r24, 0x41	; 65
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <__vector_11+0x66>
 1e8:	c4 35       	cpi	r28, 0x54	; 84
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <__vector_11+0x66>
		prev_char = T_HEX;
 1ec:	84 e5       	ldi	r24, 0x54	; 84
 1ee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <prev_char>
 1f2:	2c c0       	rjmp	.+88     	; 0x24c <__vector_11+0xbe>
	}else if(current_char == CR_HEX && (prev_char == T_HEX || prev_char == C_HEX || prev_char == X_HEX)){
 1f4:	cd 30       	cpi	r28, 0x0D	; 13
 1f6:	51 f4       	brne	.+20     	; 0x20c <__vector_11+0x7e>
 1f8:	84 35       	cpi	r24, 0x54	; 84
 1fa:	21 f0       	breq	.+8      	; 0x204 <__vector_11+0x76>
 1fc:	83 34       	cpi	r24, 0x43	; 67
 1fe:	11 f0       	breq	.+4      	; 0x204 <__vector_11+0x76>
 200:	88 35       	cpi	r24, 0x58	; 88
 202:	11 f5       	brne	.+68     	; 0x248 <__vector_11+0xba>
		prev_char = CR_HEX;
 204:	8d e0       	ldi	r24, 0x0D	; 13
 206:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <prev_char>
 20a:	20 c0       	rjmp	.+64     	; 0x24c <__vector_11+0xbe>
	}else if((current_char >= 0x30 && current_char <= 0x39) && (prev_char == N_HEX || prev_char == X_HEX)){
 20c:	d0 ed       	ldi	r29, 0xD0	; 208
 20e:	dc 0f       	add	r29, r28
 210:	da 30       	cpi	r29, 0x0A	; 10
 212:	98 f4       	brcc	.+38     	; 0x23a <__vector_11+0xac>
 214:	8e 34       	cpi	r24, 0x4E	; 78
 216:	11 f0       	breq	.+4      	; 0x21c <__vector_11+0x8e>
 218:	88 35       	cpi	r24, 0x58	; 88
 21a:	79 f4       	brne	.+30     	; 0x23a <__vector_11+0xac>
		MEM_SHIFT();
 21c:	0e 94 68 00 	call	0xd0	; 0xd0 <MEM_SHIFT>
		num_of_digits++;
 220:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		if(num_of_digits<9){
 22a:	89 30       	cpi	r24, 0x09	; 9
 22c:	78 f4       	brcc	.+30     	; 0x24c <__vector_11+0xbe>
			RECEIVED_NUMBERS[0] = current_char - 0x30;
 22e:	d0 93 73 00 	sts	0x0073, r29	; 0x800073 <RECEIVED_NUMBERS>
			prev_char = X_HEX;
 232:	88 e5       	ldi	r24, 0x58	; 88
 234:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <prev_char>
 238:	09 c0       	rjmp	.+18     	; 0x24c <__vector_11+0xbe>
		}
	}else if(prev_char == CR_HEX && current_char == LF_HEX){
 23a:	8d 30       	cpi	r24, 0x0D	; 13
 23c:	29 f4       	brne	.+10     	; 0x248 <__vector_11+0xba>
 23e:	ca 30       	cpi	r28, 0x0A	; 10
 240:	19 f4       	brne	.+6      	; 0x248 <__vector_11+0xba>
		USART_TRANSMIT();
 242:	0e 94 72 00 	call	0xe4	; 0xe4 <USART_TRANSMIT>
 246:	02 c0       	rjmp	.+4      	; 0x24c <__vector_11+0xbe>
	} else{
		prev_char = 0x00;
 248:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <prev_char>
	}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
