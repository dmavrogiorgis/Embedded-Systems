
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000002aa  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800072  00800072  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000877  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000647  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000476  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ca  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000287  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  8a:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TCNT0_INIT>:
uint8_t OK_MSG[4] = {0x4F, 0x4B, 0xD, 0xA};																	//Here we store ok in memory	
uint8_t DECODED_BCD_NUMBERS[11] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xFF};		//Decoded bcd to 7-seg
	
void TCNT0_INIT(){

	TCNT0 = 0x63;						// Set TCNT0 the value of 99(0x63) = 255 - (1 ms)*(1 MHz)/64(prescale)
  92:	83 e6       	ldi	r24, 0x63	; 99
  94:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS01)|(1<<CS00);		//Set prescale 64 - these bits of TCCR0 are set - CS02 = 0  CS01 = 1  CS00 = 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);					// TOIE0 is set to 1 in order to enable the timer overflow interrupt
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57
	
	DDRA = 0xFF;		//Set as output PORTA AND PORT C
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  a2:	84 bb       	out	0x14, r24	; 20
	
	PORTA = 0xFF;		//Initialize PORTA with 0xFF which means that 7-seg dispaly is turned off
  a4:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0x00;		//Initialize PORTC with 0x00 WHICH mean that none of the digits has enable
  a6:	15 ba       	out	0x15, r1	; 21
  a8:	08 95       	ret

000000aa <USART_INIT>:
	return;
}

void USART_INIT(unsigned int ubrr){
	
	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);		//Enable RXC interrupts, Receive and Transmit
  aa:	28 e9       	ldi	r18, 0x98	; 152
  ac:	2a b9       	out	0x0a, r18	; 10
	UBRRH = (unsigned char)(ubrr>>8);		// Set baud rate
  ae:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  b0:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = (1<<URSEL);					// We make it "1" in order to write to UCSRC
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 bd       	out	0x20, r24	; 32
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1);		//8-bit size for everything we transmit and receive
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <WDT_INIT>:
	return;
}

void WDT_INIT(){
	
	if((MCUCSR & (1<<WDRF))){
  bc:	04 b6       	in	r0, 0x34	; 52
  be:	03 fe       	sbrs	r0, 3
  c0:	0e c0       	rjmp	.+28     	; 0xde <WDT_INIT+0x22>
		MCUCSR &= ~(1<<WDRF);
  c2:	84 b7       	in	r24, 0x34	; 52
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	84 bf       	out	0x34, r24	; 52
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	22 e7       	ldi	r18, 0x72	; 114
  ce:	30 e0       	ldi	r19, 0x00	; 0
		for(uint8_t i=0; i<3; i++){
			while (!( UCSRA & (1<<UDRE)));
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <WDT_INIT+0x14>
			//UDR = ok_msg_addr[i];
			TCNT2 = RESET_MSG[i];
  d4:	81 91       	ld	r24, Z+
  d6:	84 bd       	out	0x24, r24	; 36

void WDT_INIT(){
	
	if((MCUCSR & (1<<WDRF))){
		MCUCSR &= ~(1<<WDRF);
		for(uint8_t i=0; i<3; i++){
  d8:	e2 17       	cp	r30, r18
  da:	f3 07       	cpc	r31, r19
  dc:	c9 f7       	brne	.-14     	; 0xd0 <WDT_INIT+0x14>
			while (!( UCSRA & (1<<UDRE)));
			//UDR = ok_msg_addr[i];
			TCNT2 = RESET_MSG[i];
		}
	}
	WDTCR |= (1<<WDTOE)|(1<<WDE);
  de:	81 b5       	in	r24, 0x21	; 33
  e0:	88 61       	ori	r24, 0x18	; 24
  e2:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDE)|(1<<WDP1);
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	81 bd       	out	0x21, r24	; 33
  e8:	08 95       	ret

000000ea <MEM_CLEAR>:
}

void MEM_CLEAR(){
  ea:	e5 e7       	ldi	r30, 0x75	; 117
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	2d e7       	ldi	r18, 0x7D	; 125
  f0:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0; i<8; i++){
		RECEIVED_NUMBERS[i] = 0x0A;
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	81 93       	st	Z+, r24
	WDTCR |= (1<<WDTOE)|(1<<WDE);
	WDTCR = (1<<WDE)|(1<<WDP1);
}

void MEM_CLEAR(){
	for(uint8_t i=0; i<8; i++){
  f6:	e2 17       	cp	r30, r18
  f8:	f3 07       	cpc	r31, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <MEM_CLEAR+0xa>
		RECEIVED_NUMBERS[i] = 0x0A;
	}
	return;
}
  fc:	08 95       	ret

000000fe <MEM_SHIFT>:

void MEM_SHIFT(){
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	25 e7       	ldi	r18, 0x75	; 117
 104:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t temp;
	for(uint8_t i=7; i>0; i--){
		temp = RECEIVED_NUMBERS[i-1];
		RECEIVED_NUMBERS[i] = temp;
 106:	82 91       	ld	r24, -Z
 108:	81 83       	std	Z+1, r24	; 0x01
	return;
}

void MEM_SHIFT(){
	uint8_t temp;
	for(uint8_t i=7; i>0; i--){
 10a:	e2 17       	cp	r30, r18
 10c:	f3 07       	cpc	r31, r19
 10e:	d9 f7       	brne	.-10     	; 0x106 <MEM_SHIFT+0x8>
		temp = RECEIVED_NUMBERS[i-1];
		RECEIVED_NUMBERS[i] = temp;
	}
	return;
}
 110:	08 95       	ret

00000112 <USART_TRANSMIT>:

void USART_TRANSMIT(){
 112:	eb e6       	ldi	r30, 0x6B	; 107
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	2f e6       	ldi	r18, 0x6F	; 111
 118:	30 e0       	ldi	r19, 0x00	; 0
	
	for(uint8_t i=0; i<4; i++){
		while (!( UCSRA & (1<<UDRE)));
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <USART_TRANSMIT+0x8>
		
		//UDR = ok_msg_addr[i];
		TCNT2 = OK_MSG[i];
 11e:	81 91       	ld	r24, Z+
 120:	84 bd       	out	0x24, r24	; 36
	return;
}

void USART_TRANSMIT(){
	
	for(uint8_t i=0; i<4; i++){
 122:	e2 17       	cp	r30, r18
 124:	f3 07       	cpc	r31, r19
 126:	c9 f7       	brne	.-14     	; 0x11a <USART_TRANSMIT+0x8>
		while (!( UCSRA & (1<<UDRE)));
		
		//UDR = ok_msg_addr[i];
		TCNT2 = OK_MSG[i];
	}
	prev_char = 0x00;
 128:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <prev_char>
 12c:	08 95       	ret

0000012e <USART_RECEIVE>:
}

uint8_t USART_RECEIVE(){
	uint8_t received_data;
	
	while (!(UCSRA & (1<<RXC)));
 12e:	5f 9b       	sbis	0x0b, 7	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <USART_RECEIVE>
	received_data = UDR;
 132:	8c b1       	in	r24, 0x0c	; 12
	received_data = UDR;
 134:	8c b1       	in	r24, 0x0c	; 12
	received_data = input_char;
	
	return received_data;
}
 136:	8f 2d       	mov	r24, r15
 138:	08 95       	ret

0000013a <main>:

int main(void){
	cli();						//Turn off interrupts before initialization
 13a:	f8 94       	cli
	TCNT0_INIT();				//Init the timer0
 13c:	0e 94 49 00 	call	0x92	; 0x92 <TCNT0_INIT>
	USART_INIT(UBRR_BAUD);		//Init the usart
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 55 00 	call	0xaa	; 0xaa <USART_INIT>
	WDT_INIT();
 148:	0e 94 5e 00 	call	0xbc	; 0xbc <WDT_INIT>
	sei();						//Enable interrupts after initilization
 14c:	78 94       	sei

	MEM_CLEAR();	//Initialize memory with 0x0A in order to turn off the 7-segment display
 14e:	0e 94 75 00 	call	0xea	; 0xea <MEM_CLEAR>
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x18>

00000154 <__vector_9>:
    while (1){
		
    }
}

ISR(TIMER0_OVF_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	uint8_t display_num;
	
	if(digit_cnt == 0x08){
 166:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <digit_cnt>
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	11 f4       	brne	.+4      	; 0x172 <__vector_9+0x1e>
		digit_cnt = 0x00;
 16e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <digit_cnt>
	}
	display_num = RECEIVED_NUMBERS[digit_cnt];
 172:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <digit_cnt>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	eb 58       	subi	r30, 0x8B	; 139
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	e0 81       	ld	r30, Z
	
	PORTA = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	8b bb       	out	0x1b, r24	; 27
	PORTC = (1<<digit_cnt);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	00 90 74 00 	lds	r0, 0x0074	; 0x800074 <digit_cnt>
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__vector_9+0x3c>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <__vector_9+0x38>
 194:	85 bb       	out	0x15, r24	; 21
	
	PORTA = DECODED_BCD_NUMBERS[display_num];
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e0 5a       	subi	r30, 0xA0	; 160
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	8b bb       	out	0x1b, r24	; 27
	TCNT0 = 0x63;
 1a0:	83 e6       	ldi	r24, 0x63	; 99
 1a2:	82 bf       	out	0x32, r24	; 50
	digit_cnt++;
 1a4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <digit_cnt>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <digit_cnt>
	wdt_reset();
 1ae:	a8 95       	wdr
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_11>:

ISR(USART_RXC_vect){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	uint8_t current_char = USART_RECEIVE();
 1e8:	0e 94 97 00 	call	0x12e	; 0x12e <USART_RECEIVE>
 1ec:	c8 2f       	mov	r28, r24
	
	if(prev_char == 0x00 && current_char == A_HEX){
 1ee:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <prev_char>
 1f2:	81 11       	cpse	r24, r1
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <__vector_11+0x56>
 1f6:	c1 34       	cpi	r28, 0x41	; 65
 1f8:	21 f4       	brne	.+8      	; 0x202 <__vector_11+0x40>
		prev_char = A_HEX;
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <prev_char>
 200:	3e c0       	rjmp	.+124    	; 0x27e <__vector_11+0xbc>
	}else if(prev_char == 0x00 && (current_char == C_HEX || current_char == N_HEX)){
 202:	c3 34       	cpi	r28, 0x43	; 67
 204:	11 f0       	breq	.+4      	; 0x20a <__vector_11+0x48>
 206:	ce 34       	cpi	r28, 0x4E	; 78
 208:	79 f4       	brne	.+30     	; 0x228 <__vector_11+0x66>
		MEM_CLEAR();
 20a:	0e 94 75 00 	call	0xea	; 0xea <MEM_CLEAR>
		num_of_digits = 0x00;
 20e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		prev_char = current_char;
 212:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <prev_char>
 216:	33 c0       	rjmp	.+102    	; 0x27e <__vector_11+0xbc>
	}else if(prev_char == A_HEX && current_char == T_HEX){
 218:	81 34       	cpi	r24, 0x41	; 65
 21a:	31 f4       	brne	.+12     	; 0x228 <__vector_11+0x66>
 21c:	c4 35       	cpi	r28, 0x54	; 84
 21e:	21 f4       	brne	.+8      	; 0x228 <__vector_11+0x66>
		prev_char = T_HEX;
 220:	84 e5       	ldi	r24, 0x54	; 84
 222:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <prev_char>
 226:	2b c0       	rjmp	.+86     	; 0x27e <__vector_11+0xbc>
	}else if(current_char == CR_HEX && (prev_char == T_HEX || prev_char == C_HEX || prev_char == X_HEX)){
 228:	cd 30       	cpi	r28, 0x0D	; 13
 22a:	51 f4       	brne	.+20     	; 0x240 <__vector_11+0x7e>
 22c:	84 35       	cpi	r24, 0x54	; 84
 22e:	21 f0       	breq	.+8      	; 0x238 <__vector_11+0x76>
 230:	83 34       	cpi	r24, 0x43	; 67
 232:	11 f0       	breq	.+4      	; 0x238 <__vector_11+0x76>
 234:	88 35       	cpi	r24, 0x58	; 88
 236:	11 f5       	brne	.+68     	; 0x27c <__vector_11+0xba>
		prev_char = CR_HEX;
 238:	8d e0       	ldi	r24, 0x0D	; 13
 23a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <prev_char>
 23e:	1f c0       	rjmp	.+62     	; 0x27e <__vector_11+0xbc>
	}else if((current_char >= 0x30 && current_char <= 0x39) && (prev_char == N_HEX || prev_char == X_HEX)){
 240:	d0 ed       	ldi	r29, 0xD0	; 208
 242:	dc 0f       	add	r29, r28
 244:	da 30       	cpi	r29, 0x0A	; 10
 246:	98 f4       	brcc	.+38     	; 0x26e <__vector_11+0xac>
 248:	8e 34       	cpi	r24, 0x4E	; 78
 24a:	11 f0       	breq	.+4      	; 0x250 <__vector_11+0x8e>
 24c:	88 35       	cpi	r24, 0x58	; 88
 24e:	79 f4       	brne	.+30     	; 0x26e <__vector_11+0xac>
		MEM_SHIFT();
 250:	0e 94 7f 00 	call	0xfe	; 0xfe <MEM_SHIFT>
		num_of_digits++;
 254:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		if(num_of_digits<9){
 25e:	89 30       	cpi	r24, 0x09	; 9
 260:	70 f4       	brcc	.+28     	; 0x27e <__vector_11+0xbc>
			RECEIVED_NUMBERS[0] = current_char - 0x30;
 262:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <RECEIVED_NUMBERS>
			prev_char = X_HEX;
 266:	88 e5       	ldi	r24, 0x58	; 88
 268:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <prev_char>
 26c:	08 c0       	rjmp	.+16     	; 0x27e <__vector_11+0xbc>
		}
	}else if(prev_char == CR_HEX && current_char == LF_HEX){
 26e:	8d 30       	cpi	r24, 0x0D	; 13
 270:	29 f4       	brne	.+10     	; 0x27c <__vector_11+0xba>
 272:	ca 30       	cpi	r28, 0x0A	; 10
 274:	19 f4       	brne	.+6      	; 0x27c <__vector_11+0xba>
		USART_TRANSMIT();
 276:	0e 94 89 00 	call	0x112	; 0x112 <USART_TRANSMIT>
 27a:	01 c0       	rjmp	.+2      	; 0x27e <__vector_11+0xbc>
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__vector_11+0xba>
	} else{
		prev_char = 0x00;
		while(1){
		}
	}
	wdt_reset();
 27e:	a8 95       	wdr
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
